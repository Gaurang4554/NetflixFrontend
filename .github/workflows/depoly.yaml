name: Deploy Frontend to EC2

on:
  push:
    branches:
      - main

env:
  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BACKEND_CONTAINER_IP: ${{ secrets.BACKEND_CONTAINER_IP }}

jobs:
  deploy-frontend:
    name: Deploy Frontend Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the frontend app code
      uses: actions/checkout@v2

    - name: Set up Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '14.1.0'

    - name: Install Node.js dependencies and build frontend
      run: |
        npm install
        npm run build
        # Run the built app temporarily in the background
        nohup npm start &  # Replace with the appropriate command if needed
        sleep 1

    - name: Build Docker image for frontend
      run: |
        IMAGE_TAG="${{ github.sha }}"
        docker build -t $DOCKER_USERNAME/netflix-frontend:$IMAGE_TAG .

    - name: Login to Docker Hub
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

    - name: Push Docker image to Docker Hub
      run: |
        IMAGE_TAG="${{ github.sha }}"
        docker push $DOCKER_USERNAME/netflix-frontend:$IMAGE_TAG

    - name: Copy SSH key to GitHub runner
      run: |
        echo "$SSH_PRIVATE_KEY" > mykey.pem
        chmod 600 mykey.pem

    - name: Deploy frontend Docker image on EC2
      run: |
        # Define the IMAGE_TAG in GitHub Actions runner
        IMAGE_TAG="${{ github.sha }}"

        # SSH into EC2 and run commands
        ssh -o StrictHostKeyChecking=no -i mykey.pem admin@$EC2_PUBLIC_IP << EOF
          # Set the image tag inside the EC2 instance
          IMAGE_TAG=$IMAGE_TAG

          # Stop and remove the existing frontend container if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^netflix-frontend\$"; then
            sudo docker stop netflix-frontend || true
            sudo docker rm netflix-frontend || true
          fi

          # Pull the latest Docker image from Docker Hub
          sudo docker pull $DOCKER_USERNAME/netflix-frontend:\$IMAGE_TAG

          # Run the new Docker image as the main container
          sudo docker run -d --name netflix-frontend -p 3000:3000 -e MOVIE_CATALOG_SERVICE=http://${{ secrets.BACKEND_CONTAINER_IP }}:8080 $DOCKER_USERNAME/netflix-frontend:\$IMAGE_TAG
        EOF
